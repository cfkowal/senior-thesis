// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module flashattn_flashattn_Pipeline_Attention_Loop_VITIS_LOOP_48_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        O_tile_out_TREADY,
        Q_tile_address0,
        Q_tile_ce0,
        Q_tile_q0,
        K_tile_address0,
        K_tile_ce0,
        K_tile_q0,
        V_tile_address0,
        V_tile_ce0,
        V_tile_q0,
        O_tile_out_TDATA,
        O_tile_out_TVALID,
        O_tile_out_TKEEP,
        O_tile_out_TSTRB,
        O_tile_out_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   O_tile_out_TREADY;
output  [11:0] Q_tile_address0;
output   Q_tile_ce0;
input  [31:0] Q_tile_q0;
output  [11:0] K_tile_address0;
output   K_tile_ce0;
input  [31:0] K_tile_q0;
output  [11:0] V_tile_address0;
output   V_tile_ce0;
input  [31:0] V_tile_q0;
output  [31:0] O_tile_out_TDATA;
output   O_tile_out_TVALID;
output  [3:0] O_tile_out_TKEEP;
output  [3:0] O_tile_out_TSTRB;
output  [0:0] O_tile_out_TLAST;

reg ap_idle;
reg O_tile_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_163_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    O_tile_out_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] add_ln50_fu_236_p2;
reg   [11:0] add_ln50_reg_305;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [0:0] O_out_last_fu_248_p2;
reg   [0:0] O_out_last_reg_310;
reg   [0:0] O_out_last_reg_310_pp0_iter2_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter3_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter4_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter5_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter6_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter7_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter8_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter9_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter10_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter11_reg;
reg   [0:0] O_out_last_reg_310_pp0_iter12_reg;
wire   [63:0] zext_ln50_1_fu_270_p1;
reg   [63:0] zext_ln50_1_reg_315;
reg   [63:0] zext_ln50_1_reg_315_pp0_iter3_reg;
reg   [63:0] zext_ln50_1_reg_315_pp0_iter4_reg;
reg   [63:0] zext_ln50_1_reg_315_pp0_iter5_reg;
reg   [63:0] zext_ln50_1_reg_315_pp0_iter6_reg;
reg   [31:0] Q_tile_load_reg_330;
reg   [31:0] K_tile_load_reg_335;
wire   [31:0] grp_fu_137_p2;
reg   [31:0] add_reg_345;
reg   [31:0] V_tile_load_reg_350;
reg   [6:0] col_fu_68;
wire   [6:0] add_ln48_fu_254_p2;
wire    ap_loop_init;
reg   [6:0] row_fu_72;
wire   [6:0] select_ln46_1_fu_206_p3;
reg   [12:0] indvar_flatten13_fu_76;
wire   [12:0] add_ln46_1_fu_169_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten13_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    Q_tile_ce0_local;
reg    K_tile_ce0_local;
reg    V_tile_ce0_local;
wire   [0:0] icmp_ln48_fu_192_p2;
wire   [6:0] add_ln46_fu_186_p2;
wire   [5:0] trunc_ln50_fu_214_p1;
wire   [6:0] select_ln46_fu_198_p3;
wire   [11:0] tmp_2_fu_218_p3;
wire   [11:0] zext_ln50_fu_232_p1;
wire   [0:0] cmp73_fu_226_p2;
wire   [0:0] icmp_ln52_fu_242_p2;
wire   [31:0] grp_fu_141_p2;
reg    grp_fu_137_ce;
reg    grp_fu_141_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 col_fu_68 = 7'd0;
#0 row_fu_72 = 7'd0;
#0 indvar_flatten13_fu_76 = 13'd0;
#0 ap_done_reg = 1'b0;
end

flashattn_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(Q_tile_load_reg_330),
    .din1(K_tile_load_reg_335),
    .ce(grp_fu_137_ce),
    .dout(grp_fu_137_p2)
);

flashattn_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_345),
    .din1(V_tile_load_reg_350),
    .ce(grp_fu_141_ce),
    .dout(grp_fu_141_p2)
);

flashattn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            col_fu_68 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            col_fu_68 <= add_ln48_fu_254_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln46_fu_163_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_76 <= add_ln46_1_fu_169_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_76 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            row_fu_72 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            row_fu_72 <= select_ln46_1_fu_206_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        K_tile_load_reg_335 <= K_tile_q0;
        O_out_last_reg_310_pp0_iter10_reg <= O_out_last_reg_310_pp0_iter9_reg;
        O_out_last_reg_310_pp0_iter11_reg <= O_out_last_reg_310_pp0_iter10_reg;
        O_out_last_reg_310_pp0_iter12_reg <= O_out_last_reg_310_pp0_iter11_reg;
        O_out_last_reg_310_pp0_iter2_reg <= O_out_last_reg_310;
        O_out_last_reg_310_pp0_iter3_reg <= O_out_last_reg_310_pp0_iter2_reg;
        O_out_last_reg_310_pp0_iter4_reg <= O_out_last_reg_310_pp0_iter3_reg;
        O_out_last_reg_310_pp0_iter5_reg <= O_out_last_reg_310_pp0_iter4_reg;
        O_out_last_reg_310_pp0_iter6_reg <= O_out_last_reg_310_pp0_iter5_reg;
        O_out_last_reg_310_pp0_iter7_reg <= O_out_last_reg_310_pp0_iter6_reg;
        O_out_last_reg_310_pp0_iter8_reg <= O_out_last_reg_310_pp0_iter7_reg;
        O_out_last_reg_310_pp0_iter9_reg <= O_out_last_reg_310_pp0_iter8_reg;
        Q_tile_load_reg_330 <= Q_tile_q0;
        V_tile_load_reg_350 <= V_tile_q0;
        add_reg_345 <= grp_fu_137_p2;
        zext_ln50_1_reg_315[11 : 0] <= zext_ln50_1_fu_270_p1[11 : 0];
        zext_ln50_1_reg_315_pp0_iter3_reg[11 : 0] <= zext_ln50_1_reg_315[11 : 0];
        zext_ln50_1_reg_315_pp0_iter4_reg[11 : 0] <= zext_ln50_1_reg_315_pp0_iter3_reg[11 : 0];
        zext_ln50_1_reg_315_pp0_iter5_reg[11 : 0] <= zext_ln50_1_reg_315_pp0_iter4_reg[11 : 0];
        zext_ln50_1_reg_315_pp0_iter6_reg[11 : 0] <= zext_ln50_1_reg_315_pp0_iter5_reg[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        O_out_last_reg_310 <= O_out_last_fu_248_p2;
        add_ln50_reg_305 <= add_ln50_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        K_tile_ce0_local = 1'b1;
    end else begin
        K_tile_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        O_tile_out_TDATA_blk_n = O_tile_out_TREADY;
    end else begin
        O_tile_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        O_tile_out_TVALID = 1'b1;
    end else begin
        O_tile_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Q_tile_ce0_local = 1'b1;
    end else begin
        Q_tile_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        V_tile_ce0_local = 1'b1;
    end else begin
        V_tile_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter12_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_76;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_137_ce = 1'b1;
    end else begin
        grp_fu_137_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_141_ce = 1'b1;
    end else begin
        grp_fu_141_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_tile_address0 = zext_ln50_1_fu_270_p1;

assign K_tile_ce0 = K_tile_ce0_local;

assign O_out_last_fu_248_p2 = (icmp_ln52_fu_242_p2 & cmp73_fu_226_p2);

assign O_tile_out_TDATA = grp_fu_141_p2;

assign O_tile_out_TKEEP = 4'd15;

assign O_tile_out_TLAST = O_out_last_reg_310_pp0_iter12_reg;

assign O_tile_out_TSTRB = 'bx;

assign Q_tile_address0 = zext_ln50_1_fu_270_p1;

assign Q_tile_ce0 = Q_tile_ce0_local;

assign V_tile_address0 = zext_ln50_1_reg_315_pp0_iter6_reg;

assign V_tile_ce0 = V_tile_ce0_local;

assign add_ln46_1_fu_169_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 13'd1);

assign add_ln46_fu_186_p2 = (row_fu_72 + 7'd1);

assign add_ln48_fu_254_p2 = (select_ln46_fu_198_p3 + 7'd1);

assign add_ln50_fu_236_p2 = (tmp_2_fu_218_p3 + zext_ln50_fu_232_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == O_tile_out_TREADY));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == O_tile_out_TREADY));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == O_tile_out_TREADY));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == O_tile_out_TREADY));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cmp73_fu_226_p2 = ((select_ln46_1_fu_206_p3 == 7'd63) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_163_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 13'd4096) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_192_p2 = ((col_fu_68 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_242_p2 = ((select_ln46_fu_198_p3 == 7'd63) ? 1'b1 : 1'b0);

assign select_ln46_1_fu_206_p3 = ((icmp_ln48_fu_192_p2[0:0] == 1'b1) ? add_ln46_fu_186_p2 : row_fu_72);

assign select_ln46_fu_198_p3 = ((icmp_ln48_fu_192_p2[0:0] == 1'b1) ? 7'd0 : col_fu_68);

assign tmp_2_fu_218_p3 = {{trunc_ln50_fu_214_p1}, {6'd0}};

assign trunc_ln50_fu_214_p1 = select_ln46_1_fu_206_p3[5:0];

assign zext_ln50_1_fu_270_p1 = add_ln50_reg_305;

assign zext_ln50_fu_232_p1 = select_ln46_fu_198_p3;

always @ (posedge ap_clk) begin
    zext_ln50_1_reg_315[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln50_1_reg_315_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln50_1_reg_315_pp0_iter4_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln50_1_reg_315_pp0_iter5_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln50_1_reg_315_pp0_iter6_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //flashattn_flashattn_Pipeline_Attention_Loop_VITIS_LOOP_48_3
