-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_cyclic_block_matrix_cyclic_block_Pipeline_read_A_and_B_VITIS_LOOP_28_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_TVALID : IN STD_LOGIC;
    stream_in2_TVALID : IN STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_we0 : OUT STD_LOGIC;
    B_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_we0 : OUT STD_LOGIC;
    B_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_we0 : OUT STD_LOGIC;
    B_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_we0 : OUT STD_LOGIC;
    A_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_we0 : OUT STD_LOGIC;
    A_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_we0 : OUT STD_LOGIC;
    A_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in2_TREADY : OUT STD_LOGIC;
    stream_in2_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in2_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in2_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matrix_cyclic_block_matrix_cyclic_block_Pipeline_read_A_and_B_VITIS_LOOP_28_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal stream_in2_TDATA_blk_n : STD_LOGIC;
    signal zext_ln26_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln28_fu_333_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_88 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln26_1_fu_285_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln26_fu_248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal A_2_we0_local : STD_LOGIC;
    signal trunc_ln28_fu_313_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal A_2_ce0_local : STD_LOGIC;
    signal A_1_we0_local : STD_LOGIC;
    signal A_1_ce0_local : STD_LOGIC;
    signal A_we0_local : STD_LOGIC;
    signal A_ce0_local : STD_LOGIC;
    signal A_3_we0_local : STD_LOGIC;
    signal A_3_ce0_local : STD_LOGIC;
    signal B_2_we0_local : STD_LOGIC;
    signal trunc_ln26_fu_301_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal B_2_ce0_local : STD_LOGIC;
    signal B_1_we0_local : STD_LOGIC;
    signal B_1_ce0_local : STD_LOGIC;
    signal B_we0_local : STD_LOGIC;
    signal B_ce0_local : STD_LOGIC;
    signal B_3_we0_local : STD_LOGIC;
    signal B_3_ce0_local : STD_LOGIC;
    signal icmp_ln28_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_279_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_fu_271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_cyclic_block_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matrix_cyclic_block_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_88 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_88 <= select_ln26_1_fu_285_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_92 <= add_ln26_fu_248_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_84 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_84 <= add_ln28_fu_333_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_1_address0 <= zext_ln26_fu_293_p1(2 - 1 downto 0);
    A_1_ce0 <= A_1_ce0_local;

    A_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_1_ce0_local <= ap_const_logic_1;
        else 
            A_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_1_d0 <= stream_in_TDATA;
    A_1_we0 <= A_1_we0_local;

    A_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln28_fu_313_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln28_fu_313_p1 = ap_const_lv2_1))) then 
            A_1_we0_local <= ap_const_logic_1;
        else 
            A_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln26_fu_293_p1(2 - 1 downto 0);
    A_2_ce0 <= A_2_ce0_local;

    A_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_2_ce0_local <= ap_const_logic_1;
        else 
            A_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_2_d0 <= stream_in_TDATA;
    A_2_we0 <= A_2_we0_local;

    A_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln28_fu_313_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln28_fu_313_p1 = ap_const_lv2_2))) then 
            A_2_we0_local <= ap_const_logic_1;
        else 
            A_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln26_fu_293_p1(2 - 1 downto 0);
    A_3_ce0 <= A_3_ce0_local;

    A_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_3_ce0_local <= ap_const_logic_1;
        else 
            A_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_3_d0 <= stream_in_TDATA;
    A_3_we0 <= A_3_we0_local;

    A_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln28_fu_313_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln28_fu_313_p1 = ap_const_lv2_3))) then 
            A_3_we0_local <= ap_const_logic_1;
        else 
            A_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= zext_ln26_fu_293_p1(2 - 1 downto 0);
    A_ce0 <= A_ce0_local;

    A_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0_local <= ap_const_logic_1;
        else 
            A_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= stream_in_TDATA;
    A_we0 <= A_we0_local;

    A_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln28_fu_313_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln28_fu_313_p1 = ap_const_lv2_0))) then 
            A_we0_local <= ap_const_logic_1;
        else 
            A_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln28_fu_305_p1(2 - 1 downto 0);
    B_1_ce0 <= B_1_ce0_local;

    B_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_ce0_local <= ap_const_logic_1;
        else 
            B_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_1_d0 <= stream_in2_TDATA;
    B_1_we0 <= B_1_we0_local;

    B_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln26_fu_301_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (trunc_ln26_fu_301_p1 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_we0_local <= ap_const_logic_1;
        else 
            B_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln28_fu_305_p1(2 - 1 downto 0);
    B_2_ce0 <= B_2_ce0_local;

    B_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_2_ce0_local <= ap_const_logic_1;
        else 
            B_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_2_d0 <= stream_in2_TDATA;
    B_2_we0 <= B_2_we0_local;

    B_2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln26_fu_301_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (trunc_ln26_fu_301_p1 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_2_we0_local <= ap_const_logic_1;
        else 
            B_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln28_fu_305_p1(2 - 1 downto 0);
    B_3_ce0 <= B_3_ce0_local;

    B_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_ce0_local <= ap_const_logic_1;
        else 
            B_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_3_d0 <= stream_in2_TDATA;
    B_3_we0 <= B_3_we0_local;

    B_3_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln26_fu_301_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (trunc_ln26_fu_301_p1 = ap_const_lv2_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_we0_local <= ap_const_logic_1;
        else 
            B_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln28_fu_305_p1(2 - 1 downto 0);
    B_ce0 <= B_ce0_local;

    B_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_ce0_local <= ap_const_logic_1;
        else 
            B_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= stream_in2_TDATA;
    B_we0 <= B_we0_local;

    B_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1, trunc_ln26_fu_301_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (trunc_ln26_fu_301_p1 = ap_const_lv2_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_we0_local <= ap_const_logic_1;
        else 
            B_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln26_1_fu_279_p2 <= std_logic_vector(unsigned(i_fu_88) + unsigned(ap_const_lv3_1));
    add_ln26_fu_248_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv5_1));
    add_ln28_fu_333_p2 <= std_logic_vector(unsigned(select_ln26_fu_271_p3) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1_grp1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1_grp1));
    end process;


    ap_block_state2_pp0_stage0_iter1_grp1_assign_proc : process(stream_in_TVALID, stream_in2_TVALID)
    begin
                ap_block_state2_pp0_stage0_iter1_grp1 <= ((stream_in2_TVALID = ap_const_logic_0) or (stream_in_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_242_p2)
    begin
        if (((icmp_ln26_fu_242_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten_fu_92, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_92;
        end if; 
    end process;

    icmp_ln26_fu_242_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv5_10) else "0";
    icmp_ln28_fu_265_p2 <= "1" when (j_fu_84 = ap_const_lv3_4) else "0";
    select_ln26_1_fu_285_p3 <= 
        add_ln26_1_fu_279_p2 when (icmp_ln28_fu_265_p2(0) = '1') else 
        i_fu_88;
    select_ln26_fu_271_p3 <= 
        ap_const_lv3_0 when (icmp_ln28_fu_265_p2(0) = '1') else 
        j_fu_84;

    stream_in2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in2_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in2_TDATA_blk_n <= stream_in2_TVALID;
        else 
            stream_in2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in2_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in2_TREADY <= ap_const_logic_1;
        else 
            stream_in2_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_TDATA_blk_n <= stream_in_TVALID;
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_TREADY <= ap_const_logic_1;
        else 
            stream_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln26_fu_301_p1 <= select_ln26_1_fu_285_p3(2 - 1 downto 0);
    trunc_ln28_fu_313_p1 <= select_ln26_fu_271_p3(2 - 1 downto 0);
    zext_ln26_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_fu_285_p3),64));
    zext_ln28_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_271_p3),64));
end behav;
