-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flashattn_flashattn_Pipeline_Read_K_and_V_VITIS_LOOP_35_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    K_tile_in_TVALID : IN STD_LOGIC;
    V_tile_in_TVALID : IN STD_LOGIC;
    K_tile_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    K_tile_ce0 : OUT STD_LOGIC;
    K_tile_we0 : OUT STD_LOGIC;
    K_tile_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_tile_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    V_tile_ce0 : OUT STD_LOGIC;
    V_tile_we0 : OUT STD_LOGIC;
    V_tile_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    K_tile_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    K_tile_in_TREADY : OUT STD_LOGIC;
    K_tile_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    K_tile_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    K_tile_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    V_tile_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    V_tile_in_TREADY : OUT STD_LOGIC;
    V_tile_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    V_tile_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    V_tile_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of flashattn_flashattn_Pipeline_Read_K_and_V_VITIS_LOOP_35_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln33_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal K_tile_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal V_tile_in_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln40_fu_217_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln40_reg_287 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal zext_ln40_1_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_fu_70 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln35_fu_223_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_74 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln33_1_fu_193_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten6_fu_78 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln33_1_fu_156_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal K_tile_we0_local : STD_LOGIC;
    signal K_in_data_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_tile_ce0_local : STD_LOGIC;
    signal V_tile_we0_local : STD_LOGIC;
    signal V_in_data_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_tile_ce0_local : STD_LOGIC;
    signal icmp_ln35_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln33_fu_173_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln40_fu_201_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln33_fu_185_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_205_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln40_fu_213_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component flashattn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component flashattn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    col_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_70 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col_fu_70 <= add_ln35_fu_223_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln33_fu_150_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten6_fu_78 <= add_ln33_1_fu_156_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_78 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_74 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row_fu_74 <= select_ln33_1_fu_193_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln40_reg_287 <= add_ln40_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    K_in_data_fu_248_p1 <= K_tile_in_TDATA;
    K_tile_address0 <= zext_ln40_1_fu_239_p1(12 - 1 downto 0);
    K_tile_ce0 <= K_tile_ce0_local;

    K_tile_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_tile_ce0_local <= ap_const_logic_1;
        else 
            K_tile_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    K_tile_d0 <= K_in_data_fu_248_p1;

    K_tile_in_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, K_tile_in_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_tile_in_TDATA_blk_n <= K_tile_in_TVALID;
        else 
            K_tile_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    K_tile_in_TREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_tile_in_TREADY <= ap_const_logic_1;
        else 
            K_tile_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    K_tile_we0 <= K_tile_we0_local;

    K_tile_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_tile_we0_local <= ap_const_logic_1;
        else 
            K_tile_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    V_in_data_fu_257_p1 <= V_tile_in_TDATA;
    V_tile_address0 <= zext_ln40_1_fu_239_p1(12 - 1 downto 0);
    V_tile_ce0 <= V_tile_ce0_local;

    V_tile_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_tile_ce0_local <= ap_const_logic_1;
        else 
            V_tile_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    V_tile_d0 <= V_in_data_fu_257_p1;

    V_tile_in_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, V_tile_in_TVALID, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_tile_in_TDATA_blk_n <= V_tile_in_TVALID;
        else 
            V_tile_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    V_tile_in_TREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_tile_in_TREADY <= ap_const_logic_1;
        else 
            V_tile_in_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    V_tile_we0 <= V_tile_we0_local;

    V_tile_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            V_tile_we0_local <= ap_const_logic_1;
        else 
            V_tile_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln33_1_fu_156_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv13_1));
    add_ln33_fu_173_p2 <= std_logic_vector(unsigned(row_fu_74) + unsigned(ap_const_lv7_1));
    add_ln35_fu_223_p2 <= std_logic_vector(unsigned(select_ln33_fu_185_p3) + unsigned(ap_const_lv7_1));
    add_ln40_fu_217_p2 <= std_logic_vector(unsigned(tmp_1_fu_205_p3) + unsigned(zext_ln40_fu_213_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_state3_pp0_stage0_iter2_grp1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2_grp1));
    end process;


    ap_block_state3_pp0_stage0_iter2_grp1_assign_proc : process(K_tile_in_TVALID, V_tile_in_TVALID)
    begin
                ap_block_state3_pp0_stage0_iter2_grp1 <= ((ap_const_logic_0 = V_tile_in_TVALID) or (ap_const_logic_0 = K_tile_in_TVALID));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln33_fu_150_p2)
    begin
        if (((icmp_ln33_fu_150_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten6_fu_78, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_78;
        end if; 
    end process;

    icmp_ln33_fu_150_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv13_1000) else "0";
    icmp_ln35_fu_179_p2 <= "1" when (col_fu_70 = ap_const_lv7_40) else "0";
    select_ln33_1_fu_193_p3 <= 
        add_ln33_fu_173_p2 when (icmp_ln35_fu_179_p2(0) = '1') else 
        row_fu_74;
    select_ln33_fu_185_p3 <= 
        ap_const_lv7_0 when (icmp_ln35_fu_179_p2(0) = '1') else 
        col_fu_70;
    tmp_1_fu_205_p3 <= (trunc_ln40_fu_201_p1 & ap_const_lv6_0);
    trunc_ln40_fu_201_p1 <= select_ln33_1_fu_193_p3(6 - 1 downto 0);
    zext_ln40_1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_287),64));
    zext_ln40_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_fu_185_p3),12));
end behav;
