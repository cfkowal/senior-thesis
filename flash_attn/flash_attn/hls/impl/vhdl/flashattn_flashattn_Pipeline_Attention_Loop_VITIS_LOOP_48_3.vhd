-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flashattn_flashattn_Pipeline_Attention_Loop_VITIS_LOOP_48_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    O_tile_out_TREADY : IN STD_LOGIC;
    Q_tile_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Q_tile_ce0 : OUT STD_LOGIC;
    Q_tile_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    K_tile_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    K_tile_ce0 : OUT STD_LOGIC;
    K_tile_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    V_tile_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    V_tile_ce0 : OUT STD_LOGIC;
    V_tile_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    O_tile_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    O_tile_out_TVALID : OUT STD_LOGIC;
    O_tile_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    O_tile_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    O_tile_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of flashattn_flashattn_Pipeline_Attention_Loop_VITIS_LOOP_48_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal O_tile_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln50_fu_236_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln50_reg_305 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal O_out_last_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal O_out_last_reg_310_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_1_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_315 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_315_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_315_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_315_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_1_reg_315_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Q_tile_load_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_tile_load_reg_335 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_tile_load_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_68 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln48_fu_254_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal row_fu_72 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln46_1_fu_206_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten13_fu_76 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln46_1_fu_169_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal Q_tile_ce0_local : STD_LOGIC;
    signal K_tile_ce0_local : STD_LOGIC;
    signal V_tile_ce0_local : STD_LOGIC;
    signal icmp_ln48_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_186_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln50_fu_214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln46_fu_198_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_218_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln50_fu_232_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal cmp73_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_137_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component flashattn_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component flashattn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fadd_32ns_32ns_32_5_full_dsp_1_U16 : component flashattn_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Q_tile_load_reg_330,
        din1 => K_tile_load_reg_335,
        ce => grp_fu_137_ce,
        dout => grp_fu_137_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U17 : component flashattn_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_reg_345,
        din1 => V_tile_load_reg_350,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    flow_control_loop_pipe_sequential_init_U : component flashattn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    col_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    col_fu_68 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    col_fu_68 <= add_ln48_fu_254_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln46_fu_163_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_76 <= add_ln46_1_fu_169_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_76 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    row_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    row_fu_72 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    row_fu_72 <= select_ln46_1_fu_206_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                K_tile_load_reg_335 <= K_tile_q0;
                O_out_last_reg_310_pp0_iter10_reg <= O_out_last_reg_310_pp0_iter9_reg;
                O_out_last_reg_310_pp0_iter11_reg <= O_out_last_reg_310_pp0_iter10_reg;
                O_out_last_reg_310_pp0_iter12_reg <= O_out_last_reg_310_pp0_iter11_reg;
                O_out_last_reg_310_pp0_iter2_reg <= O_out_last_reg_310;
                O_out_last_reg_310_pp0_iter3_reg <= O_out_last_reg_310_pp0_iter2_reg;
                O_out_last_reg_310_pp0_iter4_reg <= O_out_last_reg_310_pp0_iter3_reg;
                O_out_last_reg_310_pp0_iter5_reg <= O_out_last_reg_310_pp0_iter4_reg;
                O_out_last_reg_310_pp0_iter6_reg <= O_out_last_reg_310_pp0_iter5_reg;
                O_out_last_reg_310_pp0_iter7_reg <= O_out_last_reg_310_pp0_iter6_reg;
                O_out_last_reg_310_pp0_iter8_reg <= O_out_last_reg_310_pp0_iter7_reg;
                O_out_last_reg_310_pp0_iter9_reg <= O_out_last_reg_310_pp0_iter8_reg;
                Q_tile_load_reg_330 <= Q_tile_q0;
                V_tile_load_reg_350 <= V_tile_q0;
                add_reg_345 <= grp_fu_137_p2;
                    zext_ln50_1_reg_315(11 downto 0) <= zext_ln50_1_fu_270_p1(11 downto 0);
                    zext_ln50_1_reg_315_pp0_iter3_reg(11 downto 0) <= zext_ln50_1_reg_315(11 downto 0);
                    zext_ln50_1_reg_315_pp0_iter4_reg(11 downto 0) <= zext_ln50_1_reg_315_pp0_iter3_reg(11 downto 0);
                    zext_ln50_1_reg_315_pp0_iter5_reg(11 downto 0) <= zext_ln50_1_reg_315_pp0_iter4_reg(11 downto 0);
                    zext_ln50_1_reg_315_pp0_iter6_reg(11 downto 0) <= zext_ln50_1_reg_315_pp0_iter5_reg(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                O_out_last_reg_310 <= O_out_last_fu_248_p2;
                add_ln50_reg_305 <= add_ln50_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    zext_ln50_1_reg_315(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln50_1_reg_315_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln50_1_reg_315_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln50_1_reg_315_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln50_1_reg_315_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    K_tile_address0 <= zext_ln50_1_fu_270_p1(12 - 1 downto 0);
    K_tile_ce0 <= K_tile_ce0_local;

    K_tile_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            K_tile_ce0_local <= ap_const_logic_1;
        else 
            K_tile_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    O_out_last_fu_248_p2 <= (icmp_ln52_fu_242_p2 and cmp73_fu_226_p2);
    O_tile_out_TDATA <= grp_fu_141_p2;

    O_tile_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter13, O_tile_out_TREADY, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            O_tile_out_TDATA_blk_n <= O_tile_out_TREADY;
        else 
            O_tile_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    O_tile_out_TKEEP <= ap_const_lv4_F;
    O_tile_out_TLAST <= O_out_last_reg_310_pp0_iter12_reg;
    O_tile_out_TSTRB <= "XXXX";

    O_tile_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            O_tile_out_TVALID <= ap_const_logic_1;
        else 
            O_tile_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    Q_tile_address0 <= zext_ln50_1_fu_270_p1(12 - 1 downto 0);
    Q_tile_ce0 <= Q_tile_ce0_local;

    Q_tile_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Q_tile_ce0_local <= ap_const_logic_1;
        else 
            Q_tile_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    V_tile_address0 <= zext_ln50_1_reg_315_pp0_iter6_reg(12 - 1 downto 0);
    V_tile_ce0 <= V_tile_ce0_local;

    V_tile_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            V_tile_ce0_local <= ap_const_logic_1;
        else 
            V_tile_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln46_1_fu_169_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv13_1));
    add_ln46_fu_186_p2 <= std_logic_vector(unsigned(row_fu_72) + unsigned(ap_const_lv7_1));
    add_ln48_fu_254_p2 <= std_logic_vector(unsigned(select_ln46_fu_198_p3) + unsigned(ap_const_lv7_1));
    add_ln50_fu_236_p2 <= std_logic_vector(unsigned(tmp_2_fu_218_p3) + unsigned(zext_ln50_fu_232_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter13, O_tile_out_TREADY)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_0 = O_tile_out_TREADY));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter13, O_tile_out_TREADY)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_0 = O_tile_out_TREADY));
    end process;


    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter13, O_tile_out_TREADY)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_0 = O_tile_out_TREADY));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter13, O_tile_out_TREADY)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_0 = O_tile_out_TREADY));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln46_fu_163_p2)
    begin
        if (((icmp_ln46_fu_163_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten13_fu_76, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_76;
        end if; 
    end process;

    cmp73_fu_226_p2 <= "1" when (select_ln46_1_fu_206_p3 = ap_const_lv7_3F) else "0";

    grp_fu_137_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_137_ce <= ap_const_logic_1;
        else 
            grp_fu_137_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln46_fu_163_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv13_1000) else "0";
    icmp_ln48_fu_192_p2 <= "1" when (col_fu_68 = ap_const_lv7_40) else "0";
    icmp_ln52_fu_242_p2 <= "1" when (select_ln46_fu_198_p3 = ap_const_lv7_3F) else "0";
    select_ln46_1_fu_206_p3 <= 
        add_ln46_fu_186_p2 when (icmp_ln48_fu_192_p2(0) = '1') else 
        row_fu_72;
    select_ln46_fu_198_p3 <= 
        ap_const_lv7_0 when (icmp_ln48_fu_192_p2(0) = '1') else 
        col_fu_68;
    tmp_2_fu_218_p3 <= (trunc_ln50_fu_214_p1 & ap_const_lv6_0);
    trunc_ln50_fu_214_p1 <= select_ln46_1_fu_206_p3(6 - 1 downto 0);
    zext_ln50_1_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_reg_305),64));
    zext_ln50_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_fu_198_p3),12));
end behav;
