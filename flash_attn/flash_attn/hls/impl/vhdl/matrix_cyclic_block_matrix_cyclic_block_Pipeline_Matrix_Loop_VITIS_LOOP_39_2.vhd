-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_cyclic_block_matrix_cyclic_block_Pipeline_Matrix_Loop_VITIS_LOOP_39_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    B_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_1_ce0 : OUT STD_LOGIC;
    B_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_2_ce0 : OUT STD_LOGIC;
    B_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_3_ce0 : OUT STD_LOGIC;
    A_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_cyclic_block_matrix_cyclic_block_Pipeline_Matrix_Loop_VITIS_LOOP_39_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln38_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_498_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp0_stage0_iter5_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln38_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal valueout_last_1_reg_232 : STD_LOGIC_VECTOR (0 downto 0);
    signal valueout_last_1_reg_232_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal valueout_last_1_reg_232_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal valueout_last_1_reg_232_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln38_reg_498_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_498_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_498_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal valueout_last_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valueout_last_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_load_reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_load_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_load_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_load_reg_566 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_1_reg_596 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_2_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_3_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_mux_valueout_last_1_phi_fu_237_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln38_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_82 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln39_fu_386_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln38_fu_322_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten14_fu_90 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln38_fu_285_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten14_load : STD_LOGIC_VECTOR (4 downto 0);
    signal A_3_load1_fu_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_2_load3_fu_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_1_load5_fu_102 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_load7_fu_106 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal A_ce0_local : STD_LOGIC;
    signal A_1_ce0_local : STD_LOGIC;
    signal A_2_ce0_local : STD_LOGIC;
    signal A_3_ce0_local : STD_LOGIC;
    signal B_ce0_local : STD_LOGIC;
    signal B_1_ce0_local : STD_LOGIC;
    signal B_2_ce0_local : STD_LOGIC;
    signal B_3_ce0_local : STD_LOGIC;
    signal icmp_ln39_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_1_fu_316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_fu_308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_358_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp48_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_1_fu_442_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_ce : STD_LOGIC;
    signal grp_fu_249_ce : STD_LOGIC;
    signal grp_fu_253_ce : STD_LOGIC;
    signal grp_fu_257_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_cyclic_block_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_cyclic_block_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U17 : component matrix_cyclic_block_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_load_reg_551,
        din1 => A_load7_fu_106,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);

    mul_32s_32s_32_2_1_U18 : component matrix_cyclic_block_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_2_load_reg_561,
        din1 => A_2_load3_fu_98,
        ce => grp_fu_249_ce,
        dout => grp_fu_249_p2);

    mul_32s_32s_32_2_1_U19 : component matrix_cyclic_block_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_1_load_reg_556,
        din1 => A_1_load5_fu_102,
        ce => grp_fu_253_ce,
        dout => grp_fu_253_p2);

    mul_32s_32s_32_2_1_U20 : component matrix_cyclic_block_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_3_load_reg_566,
        din1 => A_3_load1_fu_94,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p2);

    flow_control_loop_pipe_sequential_init_U : component matrix_cyclic_block_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv3_0;
                elsif (((icmp_ln38_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_86 <= select_ln38_fu_322_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten14_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln38_fu_279_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten14_fu_90 <= add_ln38_fu_285_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_90 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_82 <= ap_const_lv3_0;
                elsif (((icmp_ln38_reg_498 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_82 <= add_ln39_fu_386_p2;
                end if;
            end if; 
        end if;
    end process;

    valueout_last_1_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                valueout_last_1_reg_232 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln38_reg_498_pp0_iter1_reg = ap_const_lv1_0))) then 
                valueout_last_1_reg_232 <= valueout_last_reg_546;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (first_iter_1_reg_502 = ap_const_lv1_1))) then
                A_1_load5_fu_102 <= A_1_q0;
                A_2_load3_fu_98 <= A_2_q0;
                A_3_load1_fu_94 <= A_3_q0;
                A_load7_fu_106 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then
                B_1_load_reg_556 <= B_1_q0;
                B_2_load_reg_561 <= B_2_q0;
                B_3_load_reg_566 <= B_3_q0;
                B_load_reg_551 <= B_q0;
                mul_ln42_1_reg_596 <= grp_fu_249_p2;
                mul_ln42_2_reg_601 <= grp_fu_253_p2;
                mul_ln42_3_reg_606 <= grp_fu_257_p2;
                mul_ln42_reg_591 <= grp_fu_245_p2;
                valueout_last_1_reg_232_pp0_iter2_reg <= valueout_last_1_reg_232;
                valueout_last_1_reg_232_pp0_iter3_reg <= valueout_last_1_reg_232_pp0_iter2_reg;
                valueout_last_1_reg_232_pp0_iter4_reg <= valueout_last_1_reg_232_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln38_reg_498 <= icmp_ln38_fu_279_p2;
                icmp_ln38_reg_498_pp0_iter1_reg <= icmp_ln38_reg_498;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln38_reg_498_pp0_iter2_reg <= icmp_ln38_reg_498_pp0_iter1_reg;
                icmp_ln38_reg_498_pp0_iter3_reg <= icmp_ln38_reg_498_pp0_iter2_reg;
                icmp_ln38_reg_498_pp0_iter4_reg <= icmp_ln38_reg_498_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                first_iter_1_reg_502 <= first_iter_1_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                valueout_last_reg_546 <= valueout_last_fu_380_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    A_1_address0 <= zext_ln38_fu_336_p1(2 - 1 downto 0);
    A_1_ce0 <= A_1_ce0_local;

    A_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_1_ce0_local <= ap_const_logic_1;
        else 
            A_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_2_address0 <= zext_ln38_fu_336_p1(2 - 1 downto 0);
    A_2_ce0 <= A_2_ce0_local;

    A_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_2_ce0_local <= ap_const_logic_1;
        else 
            A_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_3_address0 <= zext_ln38_fu_336_p1(2 - 1 downto 0);
    A_3_ce0 <= A_3_ce0_local;

    A_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_3_ce0_local <= ap_const_logic_1;
        else 
            A_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= zext_ln38_fu_336_p1(2 - 1 downto 0);
    A_ce0 <= A_ce0_local;

    A_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0_local <= ap_const_logic_1;
        else 
            A_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_1_address0 <= zext_ln39_fu_350_p1(2 - 1 downto 0);
    B_1_ce0 <= B_1_ce0_local;

    B_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_1_ce0_local <= ap_const_logic_1;
        else 
            B_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_2_address0 <= zext_ln39_fu_350_p1(2 - 1 downto 0);
    B_2_ce0 <= B_2_ce0_local;

    B_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_2_ce0_local <= ap_const_logic_1;
        else 
            B_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln39_fu_350_p1(2 - 1 downto 0);
    B_3_ce0 <= B_3_ce0_local;

    B_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_ce0_local <= ap_const_logic_1;
        else 
            B_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln39_fu_350_p1(2 - 1 downto 0);
    B_ce0 <= B_ce0_local;

    B_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_ce0_local <= ap_const_logic_1;
        else 
            B_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln38_1_fu_316_p2 <= std_logic_vector(unsigned(i_fu_86) + unsigned(ap_const_lv3_1));
    add_ln38_fu_285_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten14_load) + unsigned(ap_const_lv5_1));
    add_ln39_fu_386_p2 <= std_logic_vector(unsigned(select_ln15_fu_308_p3) + unsigned(ap_const_lv3_1));
    add_ln42_1_fu_442_p2 <= std_logic_vector(unsigned(mul_ln42_1_reg_596) + unsigned(mul_ln42_3_reg_606));
    add_ln42_fu_438_p2 <= std_logic_vector(unsigned(mul_ln42_2_reg_601) + unsigned(mul_ln42_reg_591));
    and_ln46_fu_374_p2 <= (icmp_ln46_fu_368_p2 and cmp48_fu_344_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state6_pp0_stage0_iter5_grp1)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5_grp1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state6_pp0_stage0_iter5_grp1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5_grp1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state6_pp0_stage0_iter5_grp1)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5_grp1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_state6_pp0_stage0_iter5_grp1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5_grp1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_grp1_assign_proc : process(stream_out_TREADY, icmp_ln38_reg_498_pp0_iter4_reg)
    begin
                ap_block_state6_pp0_stage0_iter5_grp1 <= ((icmp_ln38_reg_498_pp0_iter4_reg = ap_const_lv1_0) and (stream_out_TREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln38_fu_279_p2)
    begin
        if (((icmp_ln38_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln38_reg_498, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln38_reg_498 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_valueout_last_1_phi_fu_237_p4_assign_proc : process(ap_enable_reg_pp0_iter2, valueout_last_1_reg_232, icmp_ln38_reg_498_pp0_iter1_reg, valueout_last_reg_546, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln38_reg_498_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_valueout_last_1_phi_fu_237_p4 <= valueout_last_reg_546;
        else 
            ap_phi_mux_valueout_last_1_phi_fu_237_p4 <= valueout_last_1_reg_232;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten14_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten14_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten14_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten14_load <= indvar_flatten14_fu_90;
        end if; 
    end process;

    cmp48_fu_344_p2 <= "1" when (select_ln38_fu_322_p3 = ap_const_lv3_3) else "0";
    first_iter_1_fu_330_p2 <= "1" when (select_ln15_fu_308_p3 = ap_const_lv3_0) else "0";

    grp_fu_245_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_249_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_249_ce <= ap_const_logic_1;
        else 
            grp_fu_249_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_253_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_253_ce <= ap_const_logic_1;
        else 
            grp_fu_253_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_257_ce_assign_proc : process(ap_block_pp0_stage0_11001_grp1)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1)) then 
            grp_fu_257_ce <= ap_const_logic_1;
        else 
            grp_fu_257_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln38_fu_279_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten14_load = ap_const_lv5_10) else "0";
    icmp_ln39_fu_302_p2 <= "1" when (j_fu_82 = ap_const_lv3_4) else "0";
    icmp_ln46_fu_368_p2 <= "0" when (tmp_fu_358_p4 = ap_const_lv2_0) else "1";
    select_ln15_fu_308_p3 <= 
        ap_const_lv3_0 when (icmp_ln39_fu_302_p2(0) = '1') else 
        j_fu_82;
    select_ln38_fu_322_p3 <= 
        add_ln38_1_fu_316_p2 when (icmp_ln39_fu_302_p2(0) = '1') else 
        i_fu_86;
    stream_out_TDATA <= std_logic_vector(unsigned(add_ln42_1_fu_442_p2) + unsigned(add_ln42_fu_438_p2));

    stream_out_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, stream_out_TREADY, icmp_ln38_reg_498_pp0_iter4_reg, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (icmp_ln38_reg_498_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_out_TDATA_blk_n <= stream_out_TREADY;
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TKEEP <= ap_const_lv4_F;
    stream_out_TLAST <= valueout_last_1_reg_232_pp0_iter4_reg;
    stream_out_TSTRB <= "XXXX";

    stream_out_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, icmp_ln38_reg_498_pp0_iter4_reg, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (icmp_ln38_reg_498_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_out_TVALID <= ap_const_logic_1;
        else 
            stream_out_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_358_p4 <= select_ln15_fu_308_p3(2 downto 1);
    valueout_last_fu_380_p2 <= (ap_phi_mux_valueout_last_1_phi_fu_237_p4 or and_ln46_fu_374_p2);
    zext_ln38_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_fu_322_p3),64));
    zext_ln39_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_fu_308_p3),64));
end behav;
