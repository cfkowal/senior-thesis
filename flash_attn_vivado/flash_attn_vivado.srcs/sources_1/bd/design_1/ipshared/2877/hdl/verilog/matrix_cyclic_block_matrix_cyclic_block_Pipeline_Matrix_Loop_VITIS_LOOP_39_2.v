// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrix_cyclic_block_matrix_cyclic_block_Pipeline_Matrix_Loop_VITIS_LOOP_39_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_TREADY,
        B_address0,
        B_ce0,
        B_q0,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        B_2_address0,
        B_2_ce0,
        B_2_q0,
        B_3_address0,
        B_3_ce0,
        B_3_q0,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TLAST,
        A_address0,
        A_ce0,
        A_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   stream_out_TREADY;
output  [1:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [1:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [1:0] B_2_address0;
output   B_2_ce0;
input  [31:0] B_2_q0;
output  [1:0] B_3_address0;
output   B_3_ce0;
input  [31:0] B_3_q0;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [0:0] stream_out_TLAST;
output  [1:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [1:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [1:0] A_2_address0;
output   A_2_ce0;
input  [31:0] A_2_q0;
output  [1:0] A_3_address0;
output   A_3_ce0;
input  [31:0] A_3_q0;

reg ap_idle;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln38_reg_498;
reg   [0:0] icmp_ln38_reg_498_pp0_iter4_reg;
reg    ap_block_state6_pp0_stage0_iter5_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln38_fu_279_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_out_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg   [0:0] valueout_last_1_reg_232;
reg   [0:0] valueout_last_1_reg_232_pp0_iter2_reg;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [0:0] valueout_last_1_reg_232_pp0_iter3_reg;
reg   [0:0] valueout_last_1_reg_232_pp0_iter4_reg;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln38_reg_498_pp0_iter1_reg;
reg   [0:0] icmp_ln38_reg_498_pp0_iter2_reg;
reg   [0:0] icmp_ln38_reg_498_pp0_iter3_reg;
wire   [0:0] first_iter_1_fu_330_p2;
reg   [0:0] first_iter_1_reg_502;
wire   [0:0] valueout_last_fu_380_p2;
reg   [0:0] valueout_last_reg_546;
reg  signed [31:0] B_load_reg_551;
reg  signed [31:0] B_1_load_reg_556;
reg  signed [31:0] B_2_load_reg_561;
reg  signed [31:0] B_3_load_reg_566;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] mul_ln42_reg_591;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] mul_ln42_1_reg_596;
wire   [31:0] grp_fu_253_p2;
reg   [31:0] mul_ln42_2_reg_601;
wire   [31:0] grp_fu_257_p2;
reg   [31:0] mul_ln42_3_reg_606;
reg    ap_condition_exit_pp0_iter1_stage0;
reg   [0:0] ap_phi_mux_valueout_last_1_phi_fu_237_p4;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
wire   [63:0] zext_ln38_fu_336_p1;
wire   [63:0] zext_ln39_fu_350_p1;
reg   [2:0] j_fu_82;
wire   [2:0] add_ln39_fu_386_p2;
reg   [2:0] i_fu_86;
wire   [2:0] select_ln38_fu_322_p3;
reg   [4:0] indvar_flatten14_fu_90;
wire   [4:0] add_ln38_fu_285_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten14_load;
reg  signed [31:0] A_3_load1_fu_94;
reg  signed [31:0] A_2_load3_fu_98;
reg  signed [31:0] A_1_load5_fu_102;
reg  signed [31:0] A_load7_fu_106;
reg    ap_block_pp0_stage0_01001_grp1;
reg    A_ce0_local;
reg    A_1_ce0_local;
reg    A_2_ce0_local;
reg    A_3_ce0_local;
reg    B_ce0_local;
reg    B_1_ce0_local;
reg    B_2_ce0_local;
reg    B_3_ce0_local;
wire   [0:0] icmp_ln39_fu_302_p2;
wire   [2:0] add_ln38_1_fu_316_p2;
wire   [2:0] select_ln15_fu_308_p3;
wire   [1:0] tmp_fu_358_p4;
wire   [0:0] cmp48_fu_344_p2;
wire   [0:0] icmp_ln46_fu_368_p2;
wire   [0:0] and_ln46_fu_374_p2;
wire   [31:0] add_ln42_1_fu_442_p2;
wire   [31:0] add_ln42_fu_438_p2;
reg    grp_fu_245_ce;
reg    grp_fu_249_ce;
reg    grp_fu_253_ce;
reg    grp_fu_257_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 j_fu_82 = 3'd0;
#0 i_fu_86 = 3'd0;
#0 indvar_flatten14_fu_90 = 5'd0;
#0 A_3_load1_fu_94 = 32'd0;
#0 A_2_load3_fu_98 = 32'd0;
#0 A_1_load5_fu_102 = 32'd0;
#0 A_load7_fu_106 = 32'd0;
#0 ap_done_reg = 1'b0;
end

matrix_cyclic_block_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_reg_551),
    .din1(A_load7_fu_106),
    .ce(grp_fu_245_ce),
    .dout(grp_fu_245_p2)
);

matrix_cyclic_block_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_2_load_reg_561),
    .din1(A_2_load3_fu_98),
    .ce(grp_fu_249_ce),
    .dout(grp_fu_249_p2)
);

matrix_cyclic_block_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_1_load_reg_556),
    .din1(A_1_load5_fu_102),
    .ce(grp_fu_253_ce),
    .dout(grp_fu_253_p2)
);

matrix_cyclic_block_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_3_load_reg_566),
    .din1(A_3_load1_fu_94),
    .ce(grp_fu_257_ce),
    .dout(grp_fu_257_p2)
);

matrix_cyclic_block_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 3'd0;
        end else if (((icmp_ln38_reg_498 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_86 <= select_ln38_fu_322_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln38_fu_279_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten14_fu_90 <= add_ln38_fu_285_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_90 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_82 <= 3'd0;
        end else if (((icmp_ln38_reg_498 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_82 <= add_ln39_fu_386_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valueout_last_1_reg_232 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln38_reg_498_pp0_iter1_reg == 1'd0))) begin
        valueout_last_1_reg_232 <= valueout_last_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (first_iter_1_reg_502 == 1'd1))) begin
        A_1_load5_fu_102 <= A_1_q0;
        A_2_load3_fu_98 <= A_2_q0;
        A_3_load1_fu_94 <= A_3_q0;
        A_load7_fu_106 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        B_1_load_reg_556 <= B_1_q0;
        B_2_load_reg_561 <= B_2_q0;
        B_3_load_reg_566 <= B_3_q0;
        B_load_reg_551 <= B_q0;
        mul_ln42_1_reg_596 <= grp_fu_249_p2;
        mul_ln42_2_reg_601 <= grp_fu_253_p2;
        mul_ln42_3_reg_606 <= grp_fu_257_p2;
        mul_ln42_reg_591 <= grp_fu_245_p2;
        valueout_last_1_reg_232_pp0_iter2_reg <= valueout_last_1_reg_232;
        valueout_last_1_reg_232_pp0_iter3_reg <= valueout_last_1_reg_232_pp0_iter2_reg;
        valueout_last_1_reg_232_pp0_iter4_reg <= valueout_last_1_reg_232_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln38_reg_498 <= icmp_ln38_fu_279_p2;
        icmp_ln38_reg_498_pp0_iter1_reg <= icmp_ln38_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln38_reg_498_pp0_iter2_reg <= icmp_ln38_reg_498_pp0_iter1_reg;
        icmp_ln38_reg_498_pp0_iter3_reg <= icmp_ln38_reg_498_pp0_iter2_reg;
        icmp_ln38_reg_498_pp0_iter4_reg <= icmp_ln38_reg_498_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_1_reg_502 <= first_iter_1_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        valueout_last_reg_546 <= valueout_last_fu_380_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0_local = 1'b1;
    end else begin
        A_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_1_ce0_local = 1'b1;
    end else begin
        B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_2_ce0_local = 1'b1;
    end else begin
        B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_3_ce0_local = 1'b1;
    end else begin
        B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0_local = 1'b1;
    end else begin
        B_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_279_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln38_reg_498 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln38_reg_498_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_valueout_last_1_phi_fu_237_p4 = valueout_last_reg_546;
    end else begin
        ap_phi_mux_valueout_last_1_phi_fu_237_p4 = valueout_last_1_reg_232;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten14_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten14_load = indvar_flatten14_fu_90;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_245_ce = 1'b1;
    end else begin
        grp_fu_245_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_249_ce = 1'b1;
    end else begin
        grp_fu_249_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_253_ce = 1'b1;
    end else begin
        grp_fu_253_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_257_ce = 1'b1;
    end else begin
        grp_fu_257_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln38_reg_498_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln38_reg_498_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_1_address0 = zext_ln38_fu_336_p1;

assign A_1_ce0 = A_1_ce0_local;

assign A_2_address0 = zext_ln38_fu_336_p1;

assign A_2_ce0 = A_2_ce0_local;

assign A_3_address0 = zext_ln38_fu_336_p1;

assign A_3_ce0 = A_3_ce0_local;

assign A_address0 = zext_ln38_fu_336_p1;

assign A_ce0 = A_ce0_local;

assign B_1_address0 = zext_ln39_fu_350_p1;

assign B_1_ce0 = B_1_ce0_local;

assign B_2_address0 = zext_ln39_fu_350_p1;

assign B_2_ce0 = B_2_ce0_local;

assign B_3_address0 = zext_ln39_fu_350_p1;

assign B_3_ce0 = B_3_ce0_local;

assign B_address0 = zext_ln39_fu_350_p1;

assign B_ce0 = B_ce0_local;

assign add_ln38_1_fu_316_p2 = (i_fu_86 + 3'd1);

assign add_ln38_fu_285_p2 = (ap_sig_allocacmp_indvar_flatten14_load + 5'd1);

assign add_ln39_fu_386_p2 = (select_ln15_fu_308_p3 + 3'd1);

assign add_ln42_1_fu_442_p2 = (mul_ln42_1_reg_596 + mul_ln42_3_reg_606);

assign add_ln42_fu_438_p2 = (mul_ln42_2_reg_601 + mul_ln42_reg_591);

assign and_ln46_fu_374_p2 = (icmp_ln46_fu_368_p2 & cmp48_fu_344_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_pp0_stage0_iter5_grp1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter5_grp1 = ((icmp_ln38_reg_498_pp0_iter4_reg == 1'd0) & (stream_out_TREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cmp48_fu_344_p2 = ((select_ln38_fu_322_p3 == 3'd3) ? 1'b1 : 1'b0);

assign first_iter_1_fu_330_p2 = ((select_ln15_fu_308_p3 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_279_p2 = ((ap_sig_allocacmp_indvar_flatten14_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_302_p2 = ((j_fu_82 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_368_p2 = ((tmp_fu_358_p4 != 2'd0) ? 1'b1 : 1'b0);

assign select_ln15_fu_308_p3 = ((icmp_ln39_fu_302_p2[0:0] == 1'b1) ? 3'd0 : j_fu_82);

assign select_ln38_fu_322_p3 = ((icmp_ln39_fu_302_p2[0:0] == 1'b1) ? add_ln38_1_fu_316_p2 : i_fu_86);

assign stream_out_TDATA = (add_ln42_1_fu_442_p2 + add_ln42_fu_438_p2);

assign stream_out_TKEEP = 4'd15;

assign stream_out_TLAST = valueout_last_1_reg_232_pp0_iter4_reg;

assign stream_out_TSTRB = 'bx;

assign tmp_fu_358_p4 = {{select_ln15_fu_308_p3[2:1]}};

assign valueout_last_fu_380_p2 = (ap_phi_mux_valueout_last_1_phi_fu_237_p4 | and_ln46_fu_374_p2);

assign zext_ln38_fu_336_p1 = select_ln38_fu_322_p3;

assign zext_ln39_fu_350_p1 = select_ln15_fu_308_p3;

endmodule //matrix_cyclic_block_matrix_cyclic_block_Pipeline_Matrix_Loop_VITIS_LOOP_39_2
