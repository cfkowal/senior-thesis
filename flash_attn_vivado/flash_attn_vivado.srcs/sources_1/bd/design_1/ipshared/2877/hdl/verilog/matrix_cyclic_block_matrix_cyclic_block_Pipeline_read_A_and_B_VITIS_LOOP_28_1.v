// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matrix_cyclic_block_matrix_cyclic_block_Pipeline_read_A_and_B_VITIS_LOOP_28_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_TVALID,
        stream_in2_TVALID,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_1_address0,
        B_1_ce0,
        B_1_we0,
        B_1_d0,
        B_2_address0,
        B_2_ce0,
        B_2_we0,
        B_2_d0,
        B_3_address0,
        B_3_ce0,
        B_3_we0,
        B_3_d0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        A_1_address0,
        A_1_ce0,
        A_1_we0,
        A_1_d0,
        A_2_address0,
        A_2_ce0,
        A_2_we0,
        A_2_d0,
        A_3_address0,
        A_3_ce0,
        A_3_we0,
        A_3_d0,
        stream_in_TDATA,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TLAST,
        stream_in2_TDATA,
        stream_in2_TREADY,
        stream_in2_TKEEP,
        stream_in2_TSTRB,
        stream_in2_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   stream_in_TVALID;
input   stream_in2_TVALID;
output  [1:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
output  [1:0] B_1_address0;
output   B_1_ce0;
output   B_1_we0;
output  [31:0] B_1_d0;
output  [1:0] B_2_address0;
output   B_2_ce0;
output   B_2_we0;
output  [31:0] B_2_d0;
output  [1:0] B_3_address0;
output   B_3_ce0;
output   B_3_we0;
output  [31:0] B_3_d0;
output  [1:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
output  [1:0] A_1_address0;
output   A_1_ce0;
output   A_1_we0;
output  [31:0] A_1_d0;
output  [1:0] A_2_address0;
output   A_2_ce0;
output   A_2_we0;
output  [31:0] A_2_d0;
output  [1:0] A_3_address0;
output   A_3_ce0;
output   A_3_we0;
output  [31:0] A_3_d0;
input  [31:0] stream_in_TDATA;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [0:0] stream_in_TLAST;
input  [31:0] stream_in2_TDATA;
output   stream_in2_TREADY;
input  [3:0] stream_in2_TKEEP;
input  [3:0] stream_in2_TSTRB;
input  [0:0] stream_in2_TLAST;

reg ap_idle;
reg stream_in_TREADY;
reg stream_in2_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_242_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_in_TDATA_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    stream_in2_TDATA_blk_n;
wire   [63:0] zext_ln26_fu_293_p1;
wire   [63:0] zext_ln28_fu_305_p1;
reg   [2:0] j_fu_84;
wire   [2:0] add_ln28_fu_333_p2;
reg    ap_block_pp0_stage0_11001_grp1;
wire    ap_loop_init;
reg   [2:0] i_fu_88;
wire   [2:0] select_ln26_1_fu_285_p3;
reg   [4:0] indvar_flatten_fu_92;
wire   [4:0] add_ln26_fu_248_p2;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0;
reg    A_2_we0_local;
wire   [1:0] trunc_ln28_fu_313_p1;
reg    A_2_ce0_local;
reg    A_1_we0_local;
reg    A_1_ce0_local;
reg    A_we0_local;
reg    A_ce0_local;
reg    A_3_we0_local;
reg    A_3_ce0_local;
reg    B_2_we0_local;
wire   [1:0] trunc_ln26_fu_301_p1;
reg    B_2_ce0_local;
reg    B_1_we0_local;
reg    B_1_ce0_local;
reg    B_we0_local;
reg    B_ce0_local;
reg    B_3_we0_local;
reg    B_3_ce0_local;
wire   [0:0] icmp_ln28_fu_265_p2;
wire   [2:0] add_ln26_1_fu_279_p2;
wire   [2:0] select_ln26_fu_271_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 j_fu_84 = 3'd0;
#0 i_fu_88 = 3'd0;
#0 indvar_flatten_fu_92 = 5'd0;
#0 ap_done_reg = 1'b0;
end

matrix_cyclic_block_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_88 <= select_ln26_1_fu_285_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_242_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_92 <= add_ln26_fu_248_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_84 <= add_ln28_fu_333_p2;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln28_fu_313_p1 == 2'd1))) begin
        A_1_we0_local = 1'b1;
    end else begin
        A_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln28_fu_313_p1 == 2'd2))) begin
        A_2_we0_local = 1'b1;
    end else begin
        A_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln28_fu_313_p1 == 2'd3))) begin
        A_3_we0_local = 1'b1;
    end else begin
        A_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0_local = 1'b1;
    end else begin
        A_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (trunc_ln28_fu_313_p1 == 2'd0))) begin
        A_we0_local = 1'b1;
    end else begin
        A_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_1_ce0_local = 1'b1;
    end else begin
        B_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (trunc_ln26_fu_301_p1 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_1_we0_local = 1'b1;
    end else begin
        B_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_2_ce0_local = 1'b1;
    end else begin
        B_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (trunc_ln26_fu_301_p1 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_2_we0_local = 1'b1;
    end else begin
        B_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_3_ce0_local = 1'b1;
    end else begin
        B_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (trunc_ln26_fu_301_p1 == 2'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_3_we0_local = 1'b1;
    end else begin
        B_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0_local = 1'b1;
    end else begin
        B_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (trunc_ln26_fu_301_p1 == 2'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_we0_local = 1'b1;
    end else begin
        B_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_242_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in2_TDATA_blk_n = stream_in2_TVALID;
    end else begin
        stream_in2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in2_TREADY = 1'b1;
    end else begin
        stream_in2_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_TDATA_blk_n = stream_in_TVALID;
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_TREADY = 1'b1;
    end else begin
        stream_in_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_1_address0 = zext_ln26_fu_293_p1;

assign A_1_ce0 = A_1_ce0_local;

assign A_1_d0 = stream_in_TDATA;

assign A_1_we0 = A_1_we0_local;

assign A_2_address0 = zext_ln26_fu_293_p1;

assign A_2_ce0 = A_2_ce0_local;

assign A_2_d0 = stream_in_TDATA;

assign A_2_we0 = A_2_we0_local;

assign A_3_address0 = zext_ln26_fu_293_p1;

assign A_3_ce0 = A_3_ce0_local;

assign A_3_d0 = stream_in_TDATA;

assign A_3_we0 = A_3_we0_local;

assign A_address0 = zext_ln26_fu_293_p1;

assign A_ce0 = A_ce0_local;

assign A_d0 = stream_in_TDATA;

assign A_we0 = A_we0_local;

assign B_1_address0 = zext_ln28_fu_305_p1;

assign B_1_ce0 = B_1_ce0_local;

assign B_1_d0 = stream_in2_TDATA;

assign B_1_we0 = B_1_we0_local;

assign B_2_address0 = zext_ln28_fu_305_p1;

assign B_2_ce0 = B_2_ce0_local;

assign B_2_d0 = stream_in2_TDATA;

assign B_2_we0 = B_2_we0_local;

assign B_3_address0 = zext_ln28_fu_305_p1;

assign B_3_ce0 = B_3_ce0_local;

assign B_3_d0 = stream_in2_TDATA;

assign B_3_we0 = B_3_we0_local;

assign B_address0 = zext_ln28_fu_305_p1;

assign B_ce0 = B_ce0_local;

assign B_d0 = stream_in2_TDATA;

assign B_we0 = B_we0_local;

assign add_ln26_1_fu_279_p2 = (i_fu_88 + 3'd1);

assign add_ln26_fu_248_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln28_fu_333_p2 = (select_ln26_fu_271_p3 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1_grp1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1_grp1 = ((stream_in2_TVALID == 1'b0) | (stream_in_TVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln26_fu_242_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_265_p2 = ((j_fu_84 == 3'd4) ? 1'b1 : 1'b0);

assign select_ln26_1_fu_285_p3 = ((icmp_ln28_fu_265_p2[0:0] == 1'b1) ? add_ln26_1_fu_279_p2 : i_fu_88);

assign select_ln26_fu_271_p3 = ((icmp_ln28_fu_265_p2[0:0] == 1'b1) ? 3'd0 : j_fu_84);

assign trunc_ln26_fu_301_p1 = select_ln26_1_fu_285_p3[1:0];

assign trunc_ln28_fu_313_p1 = select_ln26_fu_271_p3[1:0];

assign zext_ln26_fu_293_p1 = select_ln26_1_fu_285_p3;

assign zext_ln28_fu_305_p1 = select_ln26_fu_271_p3;

endmodule //matrix_cyclic_block_matrix_cyclic_block_Pipeline_read_A_and_B_VITIS_LOOP_28_1
